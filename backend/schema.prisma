generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // lembre de configurar no .env
}

model User {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  email      String    @unique @db.VarChar(100)
  cpf        String    @unique @db.VarChar(11)
  password   String    @db.VarChar(255) // Senha armazenada de forma segura
  permission String    @default("user") @db.VarChar(50) // Exemplo de permissão com padrão "user"
  addresses  Address[]
  reserves   Reserve[]
}

model Address {
  id           Int    @id @default(autoincrement())
  userId       Int
  street       String @db.VarChar(100)
  number       Int
  neighborhood String @db.VarChar(100)
  city         String @db.VarChar(100)
  state        String @db.VarChar(2)
  zipCode      String @db.VarChar(8)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Console {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)
  games Game[]
}

model Game {
  id          Int      @id @default(autoincrement())
  consoleId   Int
  name        String   @db.VarChar(100)
  price       Decimal  @db.Decimal(10, 2)
  description String?

  console  Console  @relation(fields: [consoleId], references: [id], onDelete: Cascade)
  reserves Reserve[]
}

model Reserve {
  id              Int      @id @default(autoincrement())
  userId          Int
  gameId          Int
  statusReserveId Int
  reserveDate     DateTime?
  approveDate     DateTime?
  returnDate      DateTime?

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  statusReserve StatusReserve @relation(fields: [statusReserveId], references: [id])
}

model StatusReserve {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  reserves Reserve[]
}
